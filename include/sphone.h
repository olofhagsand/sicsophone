/*-----------------------------------------------------------------------------
  File:   sphone.h
  Description: Common internal .h file. All C-files in sphone should include 
  this file.
  Author: Olof Hagsand
 
  This software is a part of SICSOPHONE, a real-time, IP-based system for 
  point-to-point delivery of audio between computer end-systems.  

  Sicsophone is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Sicsophone is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Sicsophone; see the file COPYING.

 *---------------------------------------------------------------------------*/


#ifndef _SPHONE_H_
#define _SPHONE_H_

#ifdef HAVE_CONFIG_H
#include "config.h" /* generated by config & autoconf */
#endif

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <assert.h>
#ifdef WIN32
#include <WinSock2.h>
#include <ws2tcpip.h>
#include <mswsock.h>
#else /* WIN32 */
#include <unistd.h>
#include <strings.h>
#include <netinet/in.h> /* Only for internet sockaddrs (war is over) */
#include <sys/socket.h>
#include <sys/time.h>
#include <arpa/inet.h>
#endif /* WIN32 */

/*
 * Default constants
 */
#define SPHONE_SIZE_MS   20 /* Default Size of packets in ms */
#define SPHONE_SAMPLES 8000 /* Default samples per second */
#define SPHONE_BITS       8 /* Default bits per samples */
#define SPHONE_RTP_PORT    8888 /* Default RTP port */
#define MAX_PKT_SIZE   1472
/* Use real audio device as default if they are defined */
#ifdef HAVE_DIRECTSOUND
#define SPHONE_DEFAULT_AUDIO AUDIO_DIRECTSOUND
#elif defined(HAVE_SYS_AUDIOIO_H)
#define SPHONE_DEFAULT_AUDIO AUDIO_DEVAUDIO
#define DEVAUDIO_DEVICE "/dev/sound1"
#define DEVAUDIO_MIXERDEVICE "/dev/mixer"
#else
#define SPHONE_DEFAULT_AUDIO AUDIO_FILE
#endif

typedef uint16_t seq_t;
enum audio_type;

#include "sphone_rtp.h"
#include "sphone_rtcp.h"
#include "sphone_rtp_session.h"
#include "sphone_lib.h"
#include "sphone_error.h"
#include "coding/sphone_coding.h"
#include "audio/sphone_audio_play.h"
#include "audio/sphone_audio_record.h"
#include "sphone_send.h"
#include "sphone_rcv.h"
#include "sphone_playout.h"
#include "sphone_rtcp_rcv.h"
#include "sphone_rtcp_send.h"
#include "sphone_eventloop.h"
#include "sphone_silence.h"
#include "sphone_debug.h"

#include "sphone_queue.h"
#include "sphone_inet.h"

#include "getopt.h" /* conditionally compiled */

/* Solaris, for example, does not seem to have this */
#ifndef timeradd
#define	timeradd(tvp, uvp, vvp)						\
	do {								\
		(vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec;		\
		(vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec;	\
		if ((vvp)->tv_usec >= 1000000) {			\
			(vvp)->tv_sec++;				\
			(vvp)->tv_usec -= 1000000;			\
		}							\
	} while (0)
#define	timersub(tvp, uvp, vvp)						\
	do {								\
		(vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;		\
		(vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;	\
		if ((vvp)->tv_usec < 0) {				\
			(vvp)->tv_sec--;				\
			(vvp)->tv_usec += 1000000;			\
		}							\
	} while (0)
#endif /* timeradd */


/*
 * Prototypes
 */ 

#endif  /* _SPHONE_H_ */
